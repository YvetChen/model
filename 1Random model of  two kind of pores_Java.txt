Random random = new Random();

int num_ell = num_el;
int num_cir = num_ci;
int i1 = 1;
int j1 = 1;
//double i2 = 0;

double junzhix = 12.5;
double junzhiy = 25;
double junzhia = jza;
double jc = juc;
double jca = juca;
double r0 = r_circle;
double lc0 = lc; //The semimajor axis length of the ellipse
//double alpha = Math.toRadians(a); //Rotation Angle


double xstart = 0; 
double xend = 25; //The width of core
double ystart = 0;
double yend = 50;//The Length of core

double x_list[] = new double[num_cir+1];
double y_list[] = new double[num_cir+1];

x_list[0] = 0;
y_list[0] = 0;

//Draw the circles (do not intersect)

while (i1 < num_cir+1) {
  
  double x = Math.sqrt(jc)*random.nextGaussian()*(xend-xstart+1)+junzhix;

  double y = Math.sqrt(jc)*random.nextGaussian()*(xend-xstart+1)+junzhiy;
  
  int i3 = 0;
  int i2 = 0;
  
  x_list[i1] = x;
  y_list[i1] = y;
  
  for (int k = 0; k < i1; k++) {
    if (((x_list[i1]-x_list[k])*(x_list[i1]-x_list[k])+(y_list[i1]-y_list[k])*(y_list[i1]-y_list[k])) < (4*r0*r0)) {
      i2 = 1;
    }
    //if ((r_list[i1] < rstart) || (r_list[i1] > rend)) {i2 = 1; }
    else {
      i2 = 0;
    }
    i3 = i2+i3;
  }
  
  if (((x_list[i1]-xstart <= r0) || (xend-x_list[i1] <= r0))) {continue; }
  if (((y_list[i1]-ystart <= r0) || (yend-y_list[i1] <= r0))) {continue; }
  if (i3 == 0) {i1++; }
  
}

for (int l = 1; l < 1+num_cir; l++) {
  //
  model.component("comp1").geom("geom1").create("c"+l, "Circle");
  model.component("comp1").geom("geom1").feature("c"+l).set("r", r0);
  model.component("comp1").geom("geom1").feature("c"+l).set("pos", new double[]{x_list[l], y_list[l]});
}





//Draw the ellipses (do not intersect)
//they don't intersect the circles either
double x_list1[] = new double[num_ell+1];
double y_list1[] = new double[num_ell+1];
double alpha_list[] = new double[num_ell+1];
double al_list[] = new double[num_ell+1];

x_list1[0] = 0;
y_list1[0] = 0;
alpha_list[0] = 0;
al_list[0] = 0;
while (j1 < num_ell+1) {
  
  double x1 = Math.sqrt(jc)*random.nextGaussian()*(xend-xstart+1)+junzhix;
  double y1 = Math.sqrt(jc)*random.nextGaussian()*(xend-xstart+1)+junzhiy;
  double al = Math.sqrt(jca)*random.nextGaussian()*(179-1+1)+junzhia;
  double alpha = Math.toRadians(al);
  

  // double x1 = random.nextDouble()*(xend-xstart+1)+junzhix;
  // double y1 = random.nextDouble()*(xend-xstart+1)+junzhiy;
  // double al = random.nextDouble()*(180+1)+junzhia;
  // double alpha = Math.toRadians(al);
  
  int j3 = 0;
  int j2 = 0;
  int j4 = 0;
  int j5 = 0;
  int j6 = 0;
  
  x_list1[j1] = x1;
  y_list1[j1] = y1;
  alpha_list[j1] = alpha;
  al_list[j1] = al;
  
  double ax1 = x_list1[j1]-Math.cos(alpha_list[j1])*lc0;
  double ay1 = y_list1[j1]-Math.sin(alpha_list[j1])*lc0;
  double ax2 = x_list1[j1]+Math.cos(alpha_list[j1])*lc0;
  double ay2 = y_list1[j1]+Math.sin(alpha_list[j1])*lc0;
  
  

  for (int k1 = 0; k1 < j1; k1++) {
    
    double bx1 = x_list1[k1]-Math.cos(alpha_list[k1])*lc0;
    double by1 = y_list1[k1]-Math.sin(alpha_list[k1])*lc0;
    double bx2 = x_list1[k1]+Math.cos(alpha_list[k1])*lc0;
    double by2 = y_list1[k1]+Math.sin(alpha_list[k1])*lc0;
    
    

    if (Math.max(ax1, ax2) < Math.min(bx1, bx2)
        || Math.max(ay1, ay2) < Math.min(by1, by2)
        || Math.max(bx1, bx2) < Math.min(ax1, ax2)
        || Math.max(by1, by2) < Math.min(ay1, ay2)) {j2 = 0; }
    //(ax1 > ax2 ? ax1 : ax2) < (bx1 > bx2 ? bx1 : bx2) ||
    //(ay1 > ay2 ? ay1 : ay2) < (by1 > by2 ? by1 : by2) ||
    //(bx1 > bx2 ? bx1 : bx2) < (ax1 > ax2 ? ax1 : ax2) ||
    // (by1 > by2 ? by1 : by2) < (ay1 > ay2 ? ay1 : ay2)

    if ((((ax1-bx1)*(by2-by1)-(ay1-by1)*(bx2-bx1))
         *((ax2-bx1)*(by2-by1)-(ay2-by1)*(bx2-bx1))) > 0
        || (((bx1-ax1)*(ay2-ay1)-(by1-ay1)*(ax2-ax1))
            *((bx2-ax1)*(ay2-ay1)-(by2-ay1)*(ax2-ax1))) > 0) {j2 = 0; }
    else {j2 = 1; }
    j6 = j6+j2;
  }
  
  

  for (int h = 0; h < num_cir+1; h++) {
    double a, b, c, dist1 = 0, dist2, angle1, angle2; //ax+by+c=0;
    
    a = ay1-ay2;
    b = ax2-ax1;
    c = ax1*ay2-ay1*ax2;
    
    dist1 = a*x_list[h]+b*y_list[h]+c;
    dist1 *= dist1;
    dist2 = (a*a+b*b)*r0*r0; // if (dist1 > dist2) {j4 = 0; } //点到直线的距离小于半径r0
    angle1 = (x_list[h]-ax1)*(ax2-ax1)+(y_list[h]-ay1)*(ay2-ay1);
    angle2 = (x_list[h]-ax2)*(ax1-ax2)+(y_list[h]-ay2)*(ay1-ay2);

    if (((ax1-x_list[h])*(ax1-x_list[h])+(ay1-y_list[h])*(ay1-y_list[h]) < r0*r0) || ((ax2-x_list[h])*(ax2-x_list[h])+(ay2-y_list[h])*(ay2-y_list[h]) < r0*r0))
    {j4 = 1; }

    //if (((ax1-x_list[h])*(ax1-x_list[h])+(ay1-y_list[h])*(ay1-y_list[h]) < r0*r0) && ((ax2-x_list[h])*(ax2-x_list[h])+(ay2-y_list[h])*(ay2-y_list[h]) < r0*r0))
    //{j4 = 1; }
 
    else if (((ax1-x_list[h])*(ax1-x_list[h])+(ay1-y_list[h])*(ay1-y_list[h]) >= r0*r0) && ((ax2-x_list[h])*(ax2-x_list[h])+(ay2-y_list[h])*(ay2-y_list[h]) >= r0*r0)
             && (dist1 < dist2) && (angle1 > 0 && angle2 > 0))
    {j4 = 1; }
    else {j4 = 0; }
    j5 = j5+j4;
  }
  
  j3 = j6+j3+j5;

  if ((x_list1[j1]-xstart <= Math.abs(lc0*Math.cos(alpha_list[j1]))) || (xend-x_list1[j1] <= Math.abs(lc0*Math.cos(alpha_list[j1])))) {continue; }
  if ((y_list1[j1]-ystart <= Math.abs(lc0*Math.sin(alpha_list[j1]))) || (yend-y_list1[j1] <= Math.abs(lc0*Math.sin(alpha_list[j1])))) {continue; }
  if (j3 == 0) {j1++; }
  
}